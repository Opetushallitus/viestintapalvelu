<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jaxrs-client="http://cxf.apache.org/jaxrs-client" xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
       http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd 
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <context:property-placeholder
            location="classpath:viestintapalvelu.properties, file:///${user.home:''}/oph-configuration/common.properties, file:///${user.home:''}/oph-configuration/viestintapalvelu.properties, file:///${user.home:''}/oph-configuration/override.properties"
            ignore-resource-not-found="true" properties-ref="defaultProps"/>

    <bean id="defaultProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <util:properties local-override="true">
                <prop key="cas_mode">front</prop>
                <prop key="cas_key">viestintapalvelu</prop>
                <prop key="cas_service">${cas.service.viestintapalvelu}</prop>
                <prop key="cas_callback_url">${cas.callback.viestintapalvelu}</prop>
                <prop key="spring_security_default_access">isAuthenticated()</prop>
            </util:properties>
        </property>
    </bean>

    <context:annotation-config />
    <context:component-scan base-package="fi.vm.sade.viestintapalvelu"/>

    <import resource="file:///${user.home:''}/oph-configuration/security-context-backend.xml"/>

    <bean id="ticketInterceptorTarget" class="fi.vm.sade.generic.ui.portlet.security.SecurityTicketOutInterceptorRest" />
    <bean id="ticketInterceptorRest" class="fi.vm.sade.viestintapalvelu.util.LocalDevModeSecurityTicketInterceptorAdapter">
        <property name="target" ref="ticketInterceptorTarget"/>
    </bean>
    <bean id="ticketInterceptorRestInternal" class="fi.vm.sade.viestintapalvelu.util.LocalDevModeSecurityTicketInterceptorAdapter">
        <property name="target" ref="ticketInterceptorTarget"/>
        <property name="basicAuthentication" value="${viestintapalvelu.use.dev.basic.authentication:false}"/>
    </bean>

    <jaxrs-client:client id="dokumenttipalveluRestClient" serviceClass="fi.vm.sade.valinta.dokumenttipalvelu.resource.DokumenttiResource" address="${dokumenttipalvelu-service.rest.url}" inheritHeaders="true">
        <jaxrs-client:outInterceptors>
            <ref bean="ticketInterceptorRest"/>
        </jaxrs-client:outInterceptors>
        <jaxrs-client:providers>
            <ref bean="customJsonProvider"/>
        </jaxrs-client:providers>
    </jaxrs-client:client>

    <jaxrs-client:client id="organisaatioResourceClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.OrganisaatioResource" address="${viestintapalvelu.organisaatioService.rest.url}" inheritHeaders="true">
        <jaxrs-client:outInterceptors>
            <ref bean="ticketInterceptorRest"/>
        </jaxrs-client:outInterceptors>
        <jaxrs-client:providers>
            <ref bean="customJsonProvider"/>
        </jaxrs-client:providers>
    </jaxrs-client:client>

    <jaxrs-client:client id="omattiedotResourceClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.OmattiedotResource" address="${viestintapalvelu.authenticationService.omattiedot.rest.url}" inheritHeaders="true">
        <jaxrs-client:outInterceptors>
            <ref bean="ticketInterceptorRest"/>
        </jaxrs-client:outInterceptors>
        <jaxrs-client:providers>
            <ref bean="customJsonProvider"/>
        </jaxrs-client:providers>
    </jaxrs-client:client>

    <jaxrs-client:client id="henkiloResourceClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.HenkiloResource" address="${viestintapalvelu.authenticationService.omattiedot.rest.url}" inheritHeaders="true">
        <jaxrs-client:outInterceptors>
            <ref bean="ticketInterceptorRest"/>
        </jaxrs-client:outInterceptors>
        <jaxrs-client:providers>
            <ref bean="customJsonProvider"/>
        </jaxrs-client:providers>
    </jaxrs-client:client>

    <jaxrs-client:client id="emailResourceClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.EmailResource" address="${viestintapalvelu.ryhmasahkoposti.email.rest.url}" inheritHeaders="true">
        <jaxrs-client:outInterceptors>
            <ref bean="ticketInterceptorRestInternal"/>
        </jaxrs-client:outInterceptors>
        <jaxrs-client:providers>
            <ref bean="customJsonProvider"/>
        </jaxrs-client:providers>
    </jaxrs-client:client>

    <bean class="fi.vm.sade.viestintapalvelu.feature.CustomJsonProvider" id="customJsonProvider"/>

    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <contextScan/>
    </camelContext>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
    <!--Would make maxPoolSize = Integer.MAX_VALUE <bean id="executorService" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool"/>-->
    <task:executor id="executor" pool-size="12" />
    <bean id="executorService" class="org.springframework.core.task.support.ExecutorServiceAdapter">
        <constructor-arg ref="executor"/>
    </bean>

    <!-- enable spring annotation driven transactions -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Swagger configuration -->
    <bean id="swaggerConfig" class="com.wordnik.swagger.jaxrs.config.BeanConfig">
        <property name="resourcePackage" value="fi.vm.sade.viestintapalvelu"/>
        <property name="version" value="1.0"/>
        <property name="basePath" value="${viestintapalvelu.swagger.base.bath:/viestintapalvelu}/api/v1"/>

        <property name="title" value="Swagger API documentation"/>
        <property name="scan" value="true"/>
    </bean>

    <!-- Add EntityManagerFactory (required by JTA) support -->
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="flyway">
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.hbm2ddl.auto" value="${jpa.schemaUpdate}" />
                <entry key="hibernate.show_sql" value="${jpa.showSql}" />
            </map>
        </property>
    </bean>
    
    <!-- transaction manager -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="emf" />
    </bean>
 
    <!-- Flyway definitions for creating the database -->
    <bean id="dbDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/viestinta"/>
     </bean>

    <bean id="flyway" class="com.googlecode.flyway.core.Flyway" init-method="migrate">
        <property name="initOnMigrate" value="${flyway.initOnMigrate}"/>
        <property name="schemas" value="kirjeet" />
        <property name="dataSource" ref="dbDataSource" />
    </bean>
 
  </beans>